class Solution(object):
    def validMountainArray(self, arr):
        """
        :type arr: List[int]
        :rtype: bool
        """
        mountain_found = False
        size = len(arr)
        
        # Ceases to be a mountain when:
        # - Two neighboring elements are the same
        # - Comparison fails after peak is found
        # - Size of array is < 3 (edge case)
        # - First two elements fail uphill comparison (left_val < right_val) (edge case)

        if size < 3 or (arr[0]>arr[1]):
            return False

        for i in range(1, size):
            if arr[i-1] > arr[i] and not mountain_found:
                # We found the peak
                mountain_found = True
            elif (arr[i] == arr[i-1]) or ((arr[i-1] < arr[i]) and mountain_found):
                # Downhill comparison (left_val > right_val) failed after the peak is found
                mountain_found = False
                # Once it ceases to be a mountain, stop iteration
                break    
        return mountain_found
        
        
