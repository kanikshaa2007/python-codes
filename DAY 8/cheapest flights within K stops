import heapq

class Solution(object):
    def findCheapestPrice(self, n, flights, src, dst, k):
        """
        :type n: int
        :type flights: List[List[int]]
        :type src: int
        :type dst: int
        :type k: int
        :rtype: int
        """
        graph = {i: [] for i in range(n)}

        for flight in flights:
            graph[flight[0]].append((flight[1], flight[2]))

        heap = [(0, src, 0)]
        visited = set()
        while heap:
            cost, node, stops = heapq.heappop(heap)

            if node == dst:
                return cost

            if stops > k or (node, stops) in visited:
                continue
            
            visited.add((node, stops))
            
            for neighbor, price in graph[node]:
                heapq.heappush(heap, (cost + price, neighbor, stops + 1))

        return -1
