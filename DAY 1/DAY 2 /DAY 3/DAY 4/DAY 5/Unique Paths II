class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])

        # early return if starting point is not accessible
        if obstacleGrid[0][0] == 1:
            return 0

        # initialize dp grid; this will hold the number of ways to reach each square        
        dp = [[0 for _ in range(n)] for _ in range(m)]
        
        # there is exactly one way to reach the starting point
        dp[0][0] = 1

        # initalize edges first to avoid reading out of bound indexes
        for i in range(1,m):
            if obstacleGrid[i][0] == 0 and dp[i-1][0] == 1:
                dp[i][0] = 1
        for j in range(1,n):
            if obstacleGrid[0][j] == 0 and dp[0][j-1] == 1:
                dp[0][j] = 1

        # for a square in the grid, if there is no obstacle, we can reach it from:
        # 1. all the ways we can reach square on top of it
        # 2. all the ways we can reach square on the left
        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[i][j] == 0:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        
        return dp[m - 1][n - 1]
